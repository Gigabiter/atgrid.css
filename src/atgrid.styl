/*!!
* atGrid.css v3.1.1 - CSS Grid System with HTML Attributes
* https://github.com/jameskolce/atGrid
* Copyright 2016 James Kolce <contact@jameskolce.com>
* Licensed under MIT License (https://github.com/jameskolce/atGrid/blob/master/LICENSE)
*/

// CONFIGURATION
// ==========================================================================

// Max width for container
container-width = 1200px

// Gutter size
gutter = 30px

// Number of columns in a row
num-columns = 12

// Prefix for attributes
prefix = ''

// Create the columns after this breakpoint
// Set to 0 to create columns for all viewport sizes
breakpoint = false

// If you ONLY want to use the mixins for "semantic grids" set this to true
only-semantic = false

// MIXINS - You can use this to create "semantic grids"
// ==========================================================================

//
// Container
//
// Use this mixin to create a container.
//

ag-container()
  box-sizing: border-box
  margin-left: auto
  margin-right: auto
  max-width: container-width
  padding-left: (gutter/2)
  padding-right: (gutter/2)
  width: 100%

  &:before
  &:after
    content: ""
    display: table
  &:after
    clear: both

//
// Columns
//
// Use this mixin to create a column
//
// @size = The size of the column, should be a number between 0 and 1. Example: 1/2
// @offset = The desplacement of the column to the right, should be a number between 0 and 1 - column-size. Example: 1/6
// @gutters = Set to false if you don't want gutters for the column
//

ag-column(size, offset = 0, gutters = true)
  box-sizing: border-box
  float: left

  if breakpoint
    width: 100%
    @media (min-width: breakpoint)
      width: size * 100%
  else
    width: size * 100%

  if offset > 0
    margin-left: offset * 100%

  if gutters
    padding-left: (gutter/2)
    padding-right: (gutter/2)

//
// Column widths and offsets
//
// Creates the width of the columns and their offset
//

columns()
  // Create columns
  for i in (1..num-columns)
    [{prefix}column~=\"{i}\"]
      width: (i/num-columns) * 100%

  // Offset for columns
  for i in (1..num-columns - 1)
    [{prefix}column~=\"+{i}\"]
      margin-left: (i/num-columns) * 100%

// STYLES
// ==========================================================================

unless only-semantic

  //
  // General styles
  //
  // Basic styles for the container and columns
  //

  [{prefix}container]
    ag-container()

  [{prefix}column]
    ag-column(1)

  // Create the columns inside a mediaquery if there is a breakpoint
  if breakpoint
    @media (min-width: breakpoint)
      columns()
  else
    columns()

  //
  // Columns without gutters
  //

  [{prefix}column~='no-gutter']
    padding-left: 0;
    padding-right: 0;
