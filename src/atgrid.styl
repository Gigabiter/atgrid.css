/*!!
* atGrid.css - CSS Grid System with HTML Attributes
* https://github.com/jameskolce/atGrid
* Copyright 2014 James Kolce <contact@jameskolce.com>
* Licensed under MIT License (https://github.com/jameskolce/atGrid/blob/master/LICENSE)
*/

// CONFIGURATION
// ==========================================================================

// Max width for container
container-width = 1200px

// Gutter size in pixels (without the unit we can do math easily)
gutter = 30

// Number of columns in a row
num-columns = 12

// Prefix for attributes
prefix = ''

// Create the columns after this breakpoint
breakpoint = 48em

// If you ONLY want to use the mixins for "semantic grids" set this to true
only-semantic = false


// MIXINS - You can use this to create "semantic grids"
// ==========================================================================

//
// Container
//
// Use this mixin to create a row. Rows should be contained in a "container" element
//

ag-container()
  box-sizing border-box
  margin-left auto
  margin-right auto
  max-width container-width
  padding-left (gutter/2) px
  padding-right (gutter/2) px
  width 100%

//
// Rows
//
// Use this mixin to create a row. Columns should be contained in rows
//
// @clear-gutter = Set true to contain columns with gutter
//

ag-row(clear-gutter = true)
  if clear-gutter
    margin-left (gutter / -2) px
    margin-right (gutter / -2) px
  &:before
  &:after
    content ""
    display table
  &:after
    clear both

//
// Columns
//
// Use this mixin to create a column
//
// @size = The size of the column, should be a number between 0-1. Example: 1/2
// @add-gutter = Set this to true if you want to create padding for the column
//

ag-column(size, add-gutter = true)
  box-sizing border-box
  float left
  width size * 100%
  if add-gutter
    padding-left (gutter/2) px
    padding-right (gutter/2) px


// STYLES
// ==========================================================================

unless only-semantic

  //
  // General styles
  //
  // Basic styles for the container, rows and columns
  //
  // Put the columns inside the rows, and the rows inside a container.
  //

  [{prefix}container]
    ag-container()

  [{prefix}row]
    ag-row()

  [{prefix}column]
    ag-column(1)

  //
  // Column styles
  //
  // Creates the width of the columns and their offset
  //
  // To use this grid system you need to use the following syntax
  // in your HTML files (This example uses default configuration):
  //
  // <main container>
  //   <div row>
  //     <section column="6">
  //       <!-- Column with a width of 6 columns -->
  //     </section>
  //
  //     <section column="4 +2">
  //       <!-- Column with a width of 4 columns and an offset of 2 columns -->
  //     </section>
  //   </div>
  // </main>
  //

  // Create columns on devices larger than 48em
  @media (min-width: breakpoint)
    // Create columns
    for i in (1..num-columns)
      [{prefix}column~=\"{i}\"]
        width (i/num-columns) * 100%

    // Offset for columns
    for i in (1..num-columns - 1)
      [{prefix}column~=\"+{i}\"]
        margin-left (i/num-columns) * 100%
